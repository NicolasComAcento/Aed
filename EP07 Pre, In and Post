#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Tree {
    char label;
    struct Tree* left;
    struct Tree* right;
} Tree;

//build the binary tree from preorder and inorder traversals
Tree* buildTree(char* preorder, char* inorder, int length) {
    if (length == 0) {
        return NULL;
    }

    //create a new node with the label from the first element
    Tree* root = (Tree*)malloc(sizeof(Tree));
    root->label = preorder[0];
    root->left = NULL;
    root->right = NULL;

    //find the index of the root label in the inorder traversal
    int rootIndex = 0;
    while (inorder[rootIndex] != root->label) {
        rootIndex++;
    }
    root->left = buildTree(preorder + 1, inorder, rootIndex);
    root->right = buildTree(preorder + rootIndex + 1, inorder + rootIndex + 1, length - rootIndex - 1);
    return root;
}

//perform post-order traversal of the tree and print the labels
void postOrderTraversal(Tree* root) {
    if (root == NULL) {
        return;
    }
    postOrderTraversal(root->left);

    postOrderTraversal(root->right);

    printf("%c", root->label);
}

int main() {
    int numCases;
    scanf("%d", &numCases);

    for (int i = 0; i < numCases; i++) {
        int numNodes;
        scanf("%d", &numNodes);

        char preorder[53], inorder[53];
        scanf("%s %s", preorder, inorder);

        //build the tree using the preorder and inorder traversals
        Tree* root = buildTree(preorder, inorder, numNodes);

        //perform post-order traversal and print the result
        postOrderTraversal(root);
        printf("\n");

        free(root);
    }
    return 0;
}
