#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 200000

void heapSort(int arr[], int n);
void heapify(int arr[], int n, int i);
void swap(int* a, int* b);

int main() {
    int arr[N];
    srand(time(NULL));
    for (int i = 0; i < N; i++) {
        arr[i] = rand() % 200000;
    }

    clock_t start = clock();
    heapSort(arr, N);
    clock_t end = clock();

    double time = ((double) (end - start)) / CLOCKS_PER_SEC * 1000.0;

    // printf("Vetor ordernado:\n");
    // for (int i = 0; i < N; i++) {
    //     printf("%d ", arr[i]);
    // }
    // printf("\n");
    printf("Elapsed time: %.2f ms\n", time);

    return 0;
}

void heapSort(int arr[], int n) {
    // Rearranja o vetor com o função heapify
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i);
    }

    // Extrai os elementos um por um
    for (int i = n - 1; i >= 0; i--) {
        swap(&arr[0], &arr[i]);
        // Chama novamente o heapify
        heapify(arr, i, 0);
    }
}

void heapify(int arr[], int n, int i) {
    //Inicializa e faz os dois lados
    int largest = i;
    int l = 2 * i + 1; 
    int r = 2 * i + 2; 

    if (l < n && arr[l] > arr[largest]) {
        largest = l;
    }
    if (r < n && arr[r] > arr[largest]) {
        largest = r;
    }
    if (largest != i) {
        swap(&arr[i], &arr[largest]);
        heapify(arr, n, largest);
    }
}

void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}
