#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Node {
    char name[100];
    struct Node* next;
} Node;

// Function to create a new node
Node* createNode(char name[]) {
    Node* node = (Node*) malloc(sizeof(Node));
    strcpy(node->name, name);
    node->next = NULL;
    return node;
}

// Function to insert a new node with the given name at the end of the list
Node* insert(Node* head, char name[]) {
    if (head == NULL) {
        // If the list is empty, create a new node and make it the head
        head = createNode(name);
        return head;
    }

    // Traverse the list to find the last node
    Node* current = head;
    while (current->next != NULL) {
        current = current->next;
    }

    // Create a new node and add it after the last node
    current->next = createNode(name);
    return head;
}

// Function to print the names in the list
void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        if (current->next != NULL) {
            // Print the name followed by a space if it's not the last node
            printf("%s ", current->name);
            current = current->next;
        } else {
            //Print the name without if is the last node
            printf("%s", current->name);
            current = current->next;
        }
    }
    printf("\n");
}

int main() {
    Node* list = NULL;
    Node* friendList = NULL;

    char input[1000];
    fgets(input, 1000, stdin);
    char* name = strtok(input, " \n");
    while (name != NULL) {
        // Insert each name into the current list
        list = insert(list, name);
        name = strtok(NULL, " \n");
    }

    fgets(input, 1000, stdin);
    name = strtok(input, " \n");
    while (name != NULL) {
        // Insert each name into the friend list
        friendList = insert(friendList, name);
        name = strtok(NULL, " \n");
    }

    // Read the name of the friend who will receive the new list
    fgets(input, 1000, stdin);
    name = strtok(input, " \n");
    if (strcmp(name, "no") == 0) {
        // Add the friend list to the end of the current list
        Node* current = list;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = friendList;
    } else {
        // Insert before the specified name
        Node* prev = NULL;
        Node* current = list;
        while (current != NULL && strcmp(current->name, name) != 0) {
            prev = current;
            current = current->next;
        }
        if (current != NULL) {
            if (prev != NULL) {
                // Update the previous node's next pointer
                prev->next = friendList;
            } else {
                // If the specified name is the first node, update the head pointer
                list = friendList;
            }
            // Find the last node in the friend list
            Node* end = friendList;
            while (end->next != NULL) {
                end = end->next;
            }
            // Connect the end of the list to the node after the name
            end->next = current;
        }
    }

    printList(list);

    Node* current = list;
    while (current != NULL) {
        Node* temp = current;
        current = current->next;
        free(temp);
    }
    current = friendList;
    while (current != NULL) {
        Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}
