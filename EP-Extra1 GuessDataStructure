// EP01-Extra
//Nicolas Pereira Novaes
//RA: 156.253

#include <iostream>
#include <queue>
#include <stack>

using namespace std;

int main() {
    int n;
    // loop through each test case
    while (cin >> n) {
        // create a queue, stack, and priority queue for each test case
        queue<int> q;
        stack<int> s;
        priority_queue<int> pq;
        // set flags for each data structure to true
        bool isQueue = true, isStack = true, isPQ = true;
        // loop through each command
        for (int i = 0; i < n; i++) {
            int op, x;
            // read the operation and value from input
            cin >> op;
            // perform operation based on its value
            if (op == 1) {
                // add value to each data structure
                cin >> x;
                q.push(x);
                s.push(x);
                pq.push(x);
            } else {
                // remove value from each data structure and check if it matches
                cin >> x;
                if (!q.empty()) {
                    if (q.front() != x) {
                        isQueue = false;
                    }
                    q.pop();
                } else {
                    isQueue = false;
                }
                if (!s.empty()) {
                    if (s.top() != x) {
                        isStack = false;
                    }
                    s.pop();
                } else {
                    isStack = false;
                }
                if (!pq.empty()) {
                    if (pq.top() != x) {
                        isPQ = false;
                    }
                    pq.pop();
                } else {
                    isPQ = false;
                }
            }
        }
        // print the result based on the data structure flags
        if (isQueue && !isStack && !isPQ) {
            cout << "queue" << endl;
        } else if (isStack && !isQueue && !isPQ) {
            cout << "stack" << endl;
        } else if (isPQ && !isQueue && !isStack) {
            cout << "priority queue" << endl;
        } else if (!isQueue && !isStack && !isPQ) {
            cout << "impossible" << endl;
        } else {
            cout << "not sure" << endl;
        }
    }
    return 0;
}
